/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package monitor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class KoalasContext implements org.apache.thrift.TBase<KoalasContext, KoalasContext._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KoalasContext");

  private static final org.apache.thrift.protocol.TField CAT_ROOT_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catRootMessageId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAT_PARENT_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catParentMessageId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CAT_CHILD_MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catChildMessageId", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new koalasContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new koalasContextTupleSchemeFactory());
  }

  public String catRootMessageId; // required
  public String catParentMessageId; // required
  public String catChildMessageId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAT_ROOT_MESSAGE_ID((short)1, "catRootMessageId"),
    CAT_PARENT_MESSAGE_ID((short)2, "catParentMessageId"),
    CAT_CHILD_MESSAGE_ID((short)3, "catChildMessageId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAT_ROOT_MESSAGE_ID
          return CAT_ROOT_MESSAGE_ID;
        case 2: // CAT_PARENT_MESSAGE_ID
          return CAT_PARENT_MESSAGE_ID;
        case 3: // CAT_CHILD_MESSAGE_ID
          return CAT_CHILD_MESSAGE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAT_ROOT_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("catRootMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT_PARENT_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("catParentMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAT_CHILD_MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("catChildMessageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap( KoalasContext.class, metaDataMap);
  }

  public KoalasContext() {
  }

  public KoalasContext(
    String catRootMessageId,
    String catParentMessageId,
    String catChildMessageId)
  {
    this();
    this.catRootMessageId = catRootMessageId;
    this.catParentMessageId = catParentMessageId;
    this.catChildMessageId = catChildMessageId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KoalasContext(KoalasContext other) {
    if (other.isSetCatRootMessageId()) {
      this.catRootMessageId = other.catRootMessageId;
    }
    if (other.isSetCatParentMessageId()) {
      this.catParentMessageId = other.catParentMessageId;
    }
    if (other.isSetCatChildMessageId()) {
      this.catChildMessageId = other.catChildMessageId;
    }
  }

  public KoalasContext deepCopy() {
    return new KoalasContext (this);
  }

  @Override
  public void clear() {
    this.catRootMessageId = null;
    this.catParentMessageId = null;
    this.catChildMessageId = null;
  }

  public String getCatRootMessageId() {
    return this.catRootMessageId;
  }

  public KoalasContext setCatRootMessageId(String catRootMessageId) {
    this.catRootMessageId = catRootMessageId;
    return this;
  }

  public void unsetCatRootMessageId() {
    this.catRootMessageId = null;
  }

  /** Returns true if field catRootMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetCatRootMessageId() {
    return this.catRootMessageId != null;
  }

  public void setCatRootMessageIdIsSet(boolean value) {
    if (!value) {
      this.catRootMessageId = null;
    }
  }

  public String getCatParentMessageId() {
    return this.catParentMessageId;
  }

  public KoalasContext setCatParentMessageId(String catParentMessageId) {
    this.catParentMessageId = catParentMessageId;
    return this;
  }

  public void unsetCatParentMessageId() {
    this.catParentMessageId = null;
  }

  /** Returns true if field catParentMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetCatParentMessageId() {
    return this.catParentMessageId != null;
  }

  public void setCatParentMessageIdIsSet(boolean value) {
    if (!value) {
      this.catParentMessageId = null;
    }
  }

  public String getCatChildMessageId() {
    return this.catChildMessageId;
  }

  public KoalasContext setCatChildMessageId(String catChildMessageId) {
    this.catChildMessageId = catChildMessageId;
    return this;
  }

  public void unsetCatChildMessageId() {
    this.catChildMessageId = null;
  }

  /** Returns true if field catChildMessageId is set (has been assigned a value) and false otherwise */
  public boolean isSetCatChildMessageId() {
    return this.catChildMessageId != null;
  }

  public void setCatChildMessageIdIsSet(boolean value) {
    if (!value) {
      this.catChildMessageId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAT_ROOT_MESSAGE_ID:
      if (value == null) {
        unsetCatRootMessageId();
      } else {
        setCatRootMessageId((String)value);
      }
      break;

    case CAT_PARENT_MESSAGE_ID:
      if (value == null) {
        unsetCatParentMessageId();
      } else {
        setCatParentMessageId((String)value);
      }
      break;

    case CAT_CHILD_MESSAGE_ID:
      if (value == null) {
        unsetCatChildMessageId();
      } else {
        setCatChildMessageId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAT_ROOT_MESSAGE_ID:
      return getCatRootMessageId();

    case CAT_PARENT_MESSAGE_ID:
      return getCatParentMessageId();

    case CAT_CHILD_MESSAGE_ID:
      return getCatChildMessageId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAT_ROOT_MESSAGE_ID:
      return isSetCatRootMessageId();
    case CAT_PARENT_MESSAGE_ID:
      return isSetCatParentMessageId();
    case CAT_CHILD_MESSAGE_ID:
      return isSetCatChildMessageId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KoalasContext)
      return this.equals((KoalasContext)that);
    return false;
  }

  public boolean equals(KoalasContext that) {
    if (that == null)
      return false;

    boolean this_present_catRootMessageId = true && this.isSetCatRootMessageId();
    boolean that_present_catRootMessageId = true && that.isSetCatRootMessageId();
    if (this_present_catRootMessageId || that_present_catRootMessageId) {
      if (!(this_present_catRootMessageId && that_present_catRootMessageId))
        return false;
      if (!this.catRootMessageId.equals(that.catRootMessageId))
        return false;
    }

    boolean this_present_catParentMessageId = true && this.isSetCatParentMessageId();
    boolean that_present_catParentMessageId = true && that.isSetCatParentMessageId();
    if (this_present_catParentMessageId || that_present_catParentMessageId) {
      if (!(this_present_catParentMessageId && that_present_catParentMessageId))
        return false;
      if (!this.catParentMessageId.equals(that.catParentMessageId))
        return false;
    }

    boolean this_present_catChildMessageId = true && this.isSetCatChildMessageId();
    boolean that_present_catChildMessageId = true && that.isSetCatChildMessageId();
    if (this_present_catChildMessageId || that_present_catChildMessageId) {
      if (!(this_present_catChildMessageId && that_present_catChildMessageId))
        return false;
      if (!this.catChildMessageId.equals(that.catChildMessageId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(KoalasContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    KoalasContext typedOther = (KoalasContext)other;

    lastComparison = Boolean.valueOf(isSetCatRootMessageId()).compareTo(typedOther.isSetCatRootMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatRootMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catRootMessageId, typedOther.catRootMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatParentMessageId()).compareTo(typedOther.isSetCatParentMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatParentMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catParentMessageId, typedOther.catParentMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatChildMessageId()).compareTo(typedOther.isSetCatChildMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatChildMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catChildMessageId, typedOther.catChildMessageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KoalasContext(");
    boolean first = true;

    sb.append("catRootMessageId:");
    if (this.catRootMessageId == null) {
      sb.append("null");
    } else {
      sb.append(this.catRootMessageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catParentMessageId:");
    if (this.catParentMessageId == null) {
      sb.append("null");
    } else {
      sb.append(this.catParentMessageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catChildMessageId:");
    if (this.catChildMessageId == null) {
      sb.append("null");
    } else {
      sb.append(this.catChildMessageId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class koalasContextStandardSchemeFactory implements SchemeFactory {
    public koalasContextStandardScheme getScheme() {
      return new koalasContextStandardScheme();
    }
  }

  private static class koalasContextStandardScheme extends StandardScheme<KoalasContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KoalasContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAT_ROOT_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catRootMessageId = iprot.readString();
              struct.setCatRootMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAT_PARENT_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catParentMessageId = iprot.readString();
              struct.setCatParentMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAT_CHILD_MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catChildMessageId = iprot.readString();
              struct.setCatChildMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KoalasContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catRootMessageId != null) {
        oprot.writeFieldBegin(CAT_ROOT_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(struct.catRootMessageId);
        oprot.writeFieldEnd();
      }
      if (struct.catParentMessageId != null) {
        oprot.writeFieldBegin(CAT_PARENT_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(struct.catParentMessageId);
        oprot.writeFieldEnd();
      }
      if (struct.catChildMessageId != null) {
        oprot.writeFieldBegin(CAT_CHILD_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(struct.catChildMessageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class koalasContextTupleSchemeFactory implements SchemeFactory {
    public koalasContextTupleScheme getScheme() {
      return new koalasContextTupleScheme();
    }
  }

  private static class koalasContextTupleScheme extends TupleScheme<KoalasContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KoalasContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCatRootMessageId()) {
        optionals.set(0);
      }
      if (struct.isSetCatParentMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetCatChildMessageId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCatRootMessageId()) {
        oprot.writeString(struct.catRootMessageId);
      }
      if (struct.isSetCatParentMessageId()) {
        oprot.writeString(struct.catParentMessageId);
      }
      if (struct.isSetCatChildMessageId()) {
        oprot.writeString(struct.catChildMessageId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KoalasContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.catRootMessageId = iprot.readString();
        struct.setCatRootMessageIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.catParentMessageId = iprot.readString();
        struct.setCatParentMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.catChildMessageId = iprot.readString();
        struct.setCatChildMessageIdIsSet(true);
      }
    }
  }

}

